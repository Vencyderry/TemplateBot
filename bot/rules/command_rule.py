from typing import Any, Callable, List, Union, Optional, Type
from telegrinder import Message
from telegrinder.node.base import is_generator
from telegrinder.rules import ABCRule
from telegrinder.types import ChatType

from bot.models.models import User


class Argument:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã"""

    def __init__(
            self,
            name: str,
            types: List[Union[Type, Callable[[str], Any]]],
            optional: bool = False,
            from_reply: bool = False
    ):
        self.name = name
        self.types = types
        self.optional = optional
        self.from_reply = from_reply


_command_args_storage = {}


class CommandRule(ABCRule):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥"""

    def __init__(
            self,
            command: str,
            *args: Argument,
            prefix: str = "/",
            is_group: bool = False,
    ):
        self.command = command
        self.args = args
        self.prefix = prefix
        self.expected_args = [arg for arg in args if not arg.from_reply]
        self.reply_args = [arg for arg in args if arg.from_reply]
        self.is_group = is_group

    async def check(self, message: Message) -> bool:
        if self.is_group:
            if message.chat.type != ChatType.GROUP:
                return False

        if not message.text.unwrap_or_none() or not message.text.unwrap().startswith(self.prefix):
            return False

        parts = message.text.unwrap().split()
        if not parts or parts[0] != f"{self.prefix}{self.command}":
            return False

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∏—Å–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—É)
        text_args = parts[1:]
        parsed_args = {}
        error_message = None

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ reply
        for arg in self.reply_args:
            if arg.from_reply:
                if message.reply_to_message.unwrap_or_none() and message.reply_to_message.unwrap_or_none().from_user:
                    user = User.get_or_none(User.telegram_id == message.reply_to_message.unwrap_or_none().from_user.id)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–ª—è user
                    validation_result = self.validate_argument(user, arg.types, arg.name)
                    if validation_result.is_valid:
                        parsed_args[arg.name] = validation_result.value
                    else:
                        error_message = validation_result.error
                        break
                elif not arg.optional:
                    error_message = f"–ê—Ä–≥—É–º–µ–Ω—Ç {arg.name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —á–µ—Ä–µ–∑ reply —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    break
                else:
                    parsed_args[arg.name] = None

        if error_message:
            await message.answer(error_message)
            return False

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        arg_index = 0
        for i, arg in enumerate(self.expected_args):
            if arg_index >= len(text_args):
                if not arg.optional:
                    error_message = f"–ê—Ä–≥—É–º–µ–Ω—Ç {arg.name} –Ω–µ —É–∫–∞–∑–∞–Ω"
                    break
                parsed_args[arg.name] = None
                continue

            value = text_args[arg_index]
            validation_result = self.validate_argument(value, arg.types, arg.name)

            if not validation_result.is_valid:
                error_message = validation_result.error
                break

            parsed_args[arg.name] = validation_result.value
            arg_index += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if not error_message and arg_index < len(text_args):
            error_message = "–£–∫–∞–∑–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"

        if error_message:
            await self.send_usage_instruction(message, error_message)
            return False

        storage_key = self.get_command_args_storage_key(message)
        _command_args_storage[storage_key] = parsed_args
        return True

    @staticmethod
    def get_command_args_storage_key(message: Message) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        return f"{message.chat_id}:{message.message_id}"

    @classmethod
    def extract_arguments_from_ctx(cls, message: Message, **kwargs) -> dict[str, Any] | None:
        """–ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        if isinstance(message, Message):
            storage_key = cls.get_command_args_storage_key(message)
            if storage_key in _command_args_storage:
                command_args = _command_args_storage[storage_key]

                # –û–±–Ω–æ–≤–ª—è–µ–º kwargs –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
                kwargs.update(command_args)

                # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                del _command_args_storage[storage_key]
                return kwargs
        return kwargs

    def validate_argument(self, value: Any, types: List, arg_name: str) -> 'ValidationResult':
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–æ—Ç–∏–≤ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤"""
        for type_validator in types:
            try:
                if type_validator is None:
                    # None —Ç–∏–ø - –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–µ–Ω (–¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö)
                    return ValidationResult(True, value)
                elif type_validator is int:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è int
                    if isinstance(value, int) or (isinstance(value, str) and value.isdigit()):
                        return ValidationResult(True, int(value))
                elif type_validator is float:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è float
                    if isinstance(value, float):
                        return ValidationResult(True, value)
                    elif isinstance(value, int):
                        return ValidationResult(True, float(value))
                    elif isinstance(value, str):
                        try:
                            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                            normalized = value.replace(',', '.')
                            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float
                            float_value = float(normalized)
                            return ValidationResult(True, float_value)
                        except (ValueError, TypeError):
                            pass
                elif type_validator is str:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è str
                    return ValidationResult(True, str(value))
                elif callable(type_validator):
                    # –ö–∞—Å—Ç–æ–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                    result = type_validator(value)
                    if result is not None:
                        return ValidationResult(True, result)
                elif isinstance(value, type_validator):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
                    return ValidationResult(True, value)
            except (ValueError, TypeError):
                continue

        expected_types = [self.get_type_name(t) for t in types]
        error_msg = f"–ê—Ä–≥—É–º–µ–Ω—Ç {arg_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç–∏–ø–æ–≤: {', '.join(expected_types)}"
        return ValidationResult(False, None, error_msg)

    def get_type_name(self, type_validator) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —Ç–∏–ø–∞"""
        if type_validator is int:
            return "—á–∏—Å–ª–æ"
        elif type_validator is float:
            return "–¥—Ä–æ–±—å"
        elif type_validator is str:
            return "—Å—Ç—Ä–æ–∫–∞"
        elif type_validator is None:
            return "–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π"
        elif callable(type_validator):
            return "–∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø"
        else:
            return str(type_validator)

    async def send_usage_instruction(self, message: Message, error: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã"""
        args_description = []
        for arg in self.args:
            optional_str = " (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" if arg.optional else ""
            type_str = f"<{self.get_type_name(arg.types[0])}>" if arg.types else "<–ª—é–±–æ–π>"
            args_description.append(f"{arg.name}{type_str}{optional_str}")

        usage = f"{self.prefix}{self.command} {' '.join(args_description)}"
        instruction = f"‚ùå {error}\n\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n{usage}"

        await message.answer(instruction)


class ValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞"""

    def __init__(self, is_valid: bool, value: Any = None, error: str = ""):
        self.is_valid = is_valid
        self.value = value
        self.error = error


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
def user_validator(value: Any) -> Optional[User]:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ mention –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞ User)"""
    if isinstance(value, User):
        return value
    elif isinstance(value, str) and value.startswith('@'):
        # –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        return User(id=0, first_name=value)  # –ó–∞–≥–ª—É—à–∫–∞
    return None


def int_validator(s: str) -> Optional[int]:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª"""
    if s.isdigit():
        return int(s)
    return None


def float_validator(s: str) -> Optional[float]:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π"""
    try:
        return float(s)
    except ValueError:
        return None

