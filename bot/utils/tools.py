import datetime
import json

from typing import Union

from bot.models.models import User


def decode(value):
    """–§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–µ—Ä –∂—Å–æ–Ω.
    –ü—Ä–µ–æ–±—Ä–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ dict/list."""
    value = value.replace("\'", "\"")

    result = json.loads(value)
    return result


def digit(number: Union[str, int]) -> str:
    """–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª—è—é—â–∞—è —á–∏—Å–ª–æ –Ω–∞ —Ä–∞–∑—Ä—è–¥—ã"""

    if isinstance(number, str):
        number = int(number)

    return "{:,}".format(number)


def format_user_info(user: User) -> str:
    name = f"{user.first_name} {user.last_name or ''}".strip()
    if user.username:
        return f'<a href="https://t.me/{user.username}">{name}</a>'
    return name


def format_date(date_value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ ISO 8601 –≤ dd.mm.yyyy"""
    if date_value is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ datetime –æ–±—ä–µ–∫—Ç
    if hasattr(date_value, 'strftime'):
        try:
            return date_value.strftime('%d.%m.%Y')
        except:
            return str(date_value)

    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2025-09-23 13:53:20.624153+03:00"
    if isinstance(date_value, str):
        try:
            # –ü–∞—Ä—Å–∏–º ISO —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
            dt = datetime.datetime.fromisoformat(date_value.replace('Z', '+00:00'))
            return dt.strftime('%d.%m.%Y')
        except (ValueError, AttributeError):
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (–æ–±—Ä–µ–∑–∞–µ–º –¥–æ –¥–∞—Ç—ã)
            return date_value[:10] if len(date_value) >= 10 else date_value

    # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–∏–ø
    return str(date_value)
# class MessageManager:
#     @staticmethod
#     async def save_message(message: Message):
#
#         """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î"""
#         if not hasattr(message, "chat") or message.chat.type != 'private':
#             return
#
#         try:
#             user, created = User.get_or_create_user(
#                 telegram_id=message.chat_id,
#                 first_name=message.from_user.first_name,
#                 username=message.from_user.username.unwrap_or_none(),
#                 last_name=message.from_user.last_name.unwrap_or_none()
#             )
#
#             # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
#             UserMessage.create(
#                 user=user,
#                 message_id=message.message_id,
#                 chat_id=message.chat.id
#             )
#
#             logger.debug(
#                 f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}",
#                 extra={'message_id': message.message_id, 'user_id': user.telegram_id}
#             )
#
#         except IntegrityError:
#             # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏–∫–∞—Ç)
#             logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
#         except Exception as e:
#             logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
#
#     @staticmethod
#     async def delete_messages(chat_id: int, user_id: int = None):
#         """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î –∏ Telegram"""
#         try:
#             # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
#             query = UserMessage.select().where(UserMessage.chat_id == chat_id)
#
#             if user_id:
#                 user = User.get(User.telegram_id == user_id)
#                 query = query.where(UserMessage.user == user)
#
#             messages_to_delete = list(query)
#
#             if not messages_to_delete:
#                 logger.debug(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}")
#                 return
#
#             # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram
#             deleted_from_tg = 0
#             for user_message in messages_to_delete:
#                 try:
#                     await api.delete_message(
#                         message_id=user_message.message_id,
#                         chat_id=user_message.chat_id
#                     )
#                     deleted_from_tg += 1
#                     logger.debug(
#                         f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {user_message.message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ Telegram",
#                         extra={'message_id': user_message.message_id, 'chat_id': chat_id}
#                     )
#                 except Exception as e:
#                     logger.warning(
#                         f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_message.message_id} –∏–∑ Telegram: {e}",
#                         extra={'message_id': user_message.message_id, 'error': str(e)}
#                     )
#
#             delete_query = UserMessage.delete().where(UserMessage.chat_id == chat_id)
#
#             if user_id:
#                 delete_query = delete_query.where(UserMessage.user == user)
#
#             deleted_from_db = delete_query.execute()
#
#             logger.debug(
#                 f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_from_db} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î ({deleted_from_tg} –∏–∑ Telegram) –¥–ª—è chat_id {chat_id}",
#                 extra={
#                     'chat_id': chat_id,
#                     'deleted_from_db': deleted_from_db,
#                     'deleted_from_tg': deleted_from_tg
#                 }
#             )
#
#         except Exception as e:
#             logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
#
#     @staticmethod
#     async def delete_single_message(chat_id: int, message_id: int):
#         """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
#         try:
#             # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ Telegram
#             try:
#                 await api.delete_message(
#                     message_id=message_id,
#                     chat_id=chat_id
#                 )
#                 logger.debug(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ Telegram")
#             except Exception as e:
#                 logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ Telegram: {e}")
#
#             # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
#             deleted_count = (UserMessage
#                              .delete()
#                              .where(
#                 (UserMessage.chat_id == chat_id) &
#                 (UserMessage.message_id == message_id)
#             )
#                              .execute())
#
#             if deleted_count > 0:
#                 logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î")
#             else:
#                 logger.debug(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
#
#         except Exception as e:
#             logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
#
#     @staticmethod
#     def get_user_message_count(user_id: int):
#         """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#         try:
#             user = User.get(User.telegram_id == user_id)
#             return UserMessage.select().where(UserMessage.user == user).count()
#         except DoesNotExist:
#             return 0
#
#     @staticmethod
#     def cleanup_old_messages(days: int = 1):
#         """–û—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π"""
#         try:
#             cutoff_date = datetime.datetime.now() - datetime.timedelta(days=days)
#
#             deleted_count = (UserMessage
#                              .delete()
#                              .where(UserMessage.created_at < cutoff_date)
#                              .execute())
#
#             logger.info(
#                 f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π)",
#                 extra={'deleted_count': deleted_count, 'days': days}
#             )
#
#             return deleted_count
#
#         except Exception as e:
#             logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
#             return 0
